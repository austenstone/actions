# Basic CI/CD Example
# This workflow demonstrates a simple CI/CD pipeline for a Node.js application

name: Basic CI/CD Example

# Trigger on push to main branch and pull requests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Define environment variables
env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Code Quality Checks
  lint-and-test:
    name: 🔍 Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web-app/package-lock.json'
      
      - name: 📦 Install dependencies
        working-directory: src/web-app
        run: npm ci
      
      - name: 🔍 Run linting
        working-directory: src/web-app
        run: npm run lint
      
      - name: 🧪 Run tests
        working-directory: src/web-app
        run: npm test
      
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: src/web-app/test-results/
          retention-days: 7

  # Stage 2: Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web-app/package-lock.json'
      
      - name: 📦 Install dependencies
        working-directory: src/web-app
        run: npm ci
      
      - name: 🏗️ Build application
        working-directory: src/web-app
        run: npm run build
      
      - name: 📊 Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: src/web-app
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            src/web-app/dist/
            src/web-app/package.json
          retention-days: 30

  # Stage 3: Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying version ${{ needs.build.outputs.version }} to staging..."
          echo "Image digest: ${{ needs.build.outputs.image-digest }}"
          
          # In a real scenario, this would deploy to your staging environment
          # Examples:
          # - Update Kubernetes deployment
          # - Deploy to cloud platform
          # - Update container service
          
          echo "✅ Deployment to staging completed successfully"
      
      - name: 🏥 Health check
        run: |
          echo "Performing health check on staging environment..."
          # In a real scenario, this would check your staging URL
          # curl -f https://staging.example.com/health || exit 1
          echo "✅ Health check passed"
      
      - name: 📢 Notify deployment
        run: |
          echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Stage 4: Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🧪 Run integration tests
        working-directory: src/web-app
        run: |
          echo "Running integration tests against staging environment..."
          # npm run test:integration
          echo "✅ Integration tests passed"
      
      - name: 📊 Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: src/web-app/integration-test-results/
          retention-days: 7

  # Stage 5: Deploy to Production (Manual Approval)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://example.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to production
        run: |
          echo "Deploying version ${{ needs.build.outputs.version }} to production..."
          
          # In a real scenario, this would deploy to your production environment
          # Examples:
          # - Blue/green deployment
          # - Rolling deployment
          # - Canary deployment
          
          echo "✅ Deployment to production completed successfully"
      
      - name: 🏥 Production health check
        run: |
          echo "Performing health check on production environment..."
          # curl -f https://example.com/health || exit 1
          echo "✅ Production health check passed"
      
      - name: 📢 Success notification
        run: |
          echo "## 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://example.com" >> $GITHUB_STEP_SUMMARY

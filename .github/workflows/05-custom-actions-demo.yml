name: 05 - Custom Action Ecosystem

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options: ['staging', 'production']
        default: 'staging'
      test_failure:
        description: 'Test deployment failure (for rollback demo)'
        required: false
        type: boolean
        default: false
      notification_enabled:
        description: 'Enable notifications'
        required: false
        type: boolean
        default: true

env:
  APP_VERSION: 1.2.3

jobs:
  # Test the Smart Deploy composite action
  test-smart-deploy:
    name: Test Smart Deploy Action
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.deploy.outputs.deployment_id }}
      deployment-url: ${{ steps.deploy.outputs.deployment_url }}
      deployment-status: ${{ steps.deploy.outputs.deployment_status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Deploy using Smart Deploy action
        id: deploy
        uses: ./.github/actions/smart-deploy
        with:
          environment: ${{ github.event.inputs.environment }}
          health_check_url: https://${{ github.event.inputs.environment }}.example.com/health
          rollback_on_failure: true
          timeout_minutes: 5
          notification_webhook: ${{ github.event.inputs.notification_enabled == 'true' && 'https://hooks.slack.com/example' || '' }}
          
      - name: Display deployment results
        run: |
          echo "🎯 Deployment Results:"
          echo "- Deployment ID: ${{ steps.deploy.outputs.deployment_id }}"
          echo "- Deployment URL: ${{ steps.deploy.outputs.deployment_url }}"
          echo "- Status: ${{ steps.deploy.outputs.deployment_status }}"

  # Test JavaScript action (simulated - would be a real action in practice)
  test-security-scanner:
    name: Test Security Scanner Action
    runs-on: ubuntu-latest
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
      vulnerabilities: ${{ steps.scan.outputs.vulnerabilities }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Security Scanner (Simulated)
        id: scan
        run: |
          echo "🔍 Running custom security scanner..."
          
          # Simulate security scanning
          sleep 3
          
          # Generate mock results
          VULNERABILITIES=0
          SCAN_RESULTS="Security scan completed successfully"
          
          # Check for common security issues
          if grep -r "password.*=" --include="*.js" --include="*.py" src/ 2>/dev/null; then
            VULNERABILITIES=$((VULNERABILITIES + 1))
            SCAN_RESULTS="Warning: Potential hardcoded credentials found"
          fi
          
          if find src/ -name "*.js" -exec grep -l "eval(" {} \; 2>/dev/null | head -1; then
            VULNERABILITIES=$((VULNERABILITIES + 1))
            SCAN_RESULTS="Warning: Dangerous eval() usage detected"
          fi
          
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "results=$SCAN_RESULTS" >> $GITHUB_OUTPUT
          
          if [[ $VULNERABILITIES -eq 0 ]]; then
            echo "✅ No security vulnerabilities found"
          else
            echo "⚠️ Found $VULNERABILITIES potential security issues"
          fi

  # Test Docker action (simulated - would build and use a real Docker action)
  test-notification-action:
    name: Test Notification Action
    runs-on: ubuntu-latest
    needs: [test-smart-deploy, test-security-scanner]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Multi-Platform Notification (Simulated Docker Action)
        run: |
          echo "📬 Custom Docker-based notification action"
          echo "=================================="
          
          # Simulate Docker action behavior
          echo "🐳 Running containerized notification service..."
          
          # Prepare notification payload
          cat > notification.json << EOF
          {
            "workflow": "${{ github.workflow }}",
            "repository": "${{ github.repository }}",
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "results": {
              "deployment": {
                "id": "${{ needs.test-smart-deploy.outputs.deployment-id }}",
                "url": "${{ needs.test-smart-deploy.outputs.deployment-url }}",
                "status": "${{ needs.test-smart-deploy.outputs.deployment-status }}"
              },
              "security": {
                "vulnerabilities": "${{ needs.test-security-scanner.outputs.vulnerabilities }}",
                "results": "${{ needs.test-security-scanner.outputs.scan-results }}"
              }
            }
          }
          EOF
          
          echo "📨 Notification payload:"
          cat notification.json | jq '.'
          
          # Simulate sending notifications to multiple platforms
          echo ""
          echo "🚀 Sending notifications to:"
          echo "  • Slack webhook: ✅ Sent"
          echo "  • Microsoft Teams: ✅ Sent"
          echo "  • Email: ✅ Sent"
          echo "  • PagerDuty: ✅ Sent"
          
          sleep 2
          echo "✅ All notifications sent successfully"

  # Test reusable workflow (simulated)
  test-reusable-workflow:
    name: Test Reusable Workflow Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Simulate Reusable Workflow Call
        run: |
          echo "🔄 Testing reusable workflow integration"
          echo "======================================"
          
          # In a real scenario, this would call a reusable workflow like:
          # uses: ./.github/workflows/reusable-build.yml
          
          echo "📋 Reusable workflow would handle:"
          echo "  • Standardized build process"
          echo "  • Common security checks"
          echo "  • Shared deployment logic"
          echo "  • Consistent notifications"
          
          echo "✅ Reusable workflow simulation completed"

  # Action marketplace simulation
  test-marketplace-actions:
    name: Test Third-Party Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Test Action Composition
        run: |
          echo "🏪 Testing action marketplace integration"
          echo "======================================="
          
          echo "🔧 Actions being composed:"
          echo "  • actions/checkout@v4 ✅"
          echo "  • actions/setup-node@v4 ✅"
          echo "  • actions/cache@v4 ✅"
          echo "  • github/codeql-action ✅"
          echo "  • docker/build-push-action ✅"
          echo "  • Custom smart-deploy action ✅"
          
          echo ""
          echo "🎯 Benefits of action composition:"
          echo "  • Reusable components"
          echo "  • Community-maintained actions"
          echo "  • Consistent behavior across repos"
          echo "  • Reduced workflow complexity"
          
  # Generate comprehensive summary
  generate-summary:
    name: Generate Action Demo Summary
    runs-on: ubuntu-latest
    needs: [test-smart-deploy, test-security-scanner, test-notification-action, test-reusable-workflow, test-marketplace-actions]
    if: always()
    steps:
      - name: Create comprehensive summary
        run: |
          echo "## 🎭 Custom Action Ecosystem Demo Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🚀 Smart Deploy Action Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: ${{ needs.test-smart-deploy.outputs.deployment-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment URL**: ${{ needs.test-smart-deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.test-smart-deploy.outputs.deployment-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔒 Security Scanner Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilities Found**: ${{ needs.test-security-scanner.outputs.vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Results**: ${{ needs.test-security-scanner.outputs.scan-results }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Action Types Demonstrated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Composite Action**: Smart Deploy (`.github/actions/smart-deploy`)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **JavaScript Action**: Security Scanner (simulated)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Docker Action**: Multi-platform Notifier (simulated)" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ **Reusable Workflow**: Build & Deploy (simulated)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎯 Key Features Showcased" >> $GITHUB_STEP_SUMMARY
          echo "- **Input Validation**: Comprehensive parameter checking" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Checks**: Automated deployment verification" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback Capability**: Automatic failure recovery" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-platform Notifications**: Slack, Teams, Email, PagerDuty" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Integration**: Automated vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Composition**: Combining multiple actions effectively" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🏗️ Architecture Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **Reusability**: Actions can be used across multiple repositories" >> $GITHUB_STEP_SUMMARY
          echo "- **Maintainability**: Centralized logic in custom actions" >> $GITHUB_STEP_SUMMARY
          echo "- **Testability**: Each action can be tested independently" >> $GITHUB_STEP_SUMMARY
          echo "- **Scalability**: Easy to extend and modify functionality" >> $GITHUB_STEP_SUMMARY
          echo "- **Community**: Leverage marketplace actions and contribute back" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📚 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Publish actions to GitHub Marketplace" >> $GITHUB_STEP_SUMMARY
          echo "- Add comprehensive tests for custom actions" >> $GITHUB_STEP_SUMMARY
          echo "- Implement real notification integrations" >> $GITHUB_STEP_SUMMARY
          echo "- Create reusable workflows for common patterns" >> $GITHUB_STEP_SUMMARY
          echo "- Build Docker-based actions for complex logic" >> $GITHUB_STEP_SUMMARY

      - name: Action ecosystem metrics
        run: |
          echo "📈 Custom Action Ecosystem Metrics:"
          echo "======================================"
          echo "• Actions created: 1 (Smart Deploy)"
          echo "• Actions simulated: 3 (Security Scanner, Notifier, Reusable Workflow)"
          echo "• Marketplace actions used: 5+ (checkout, setup-node, cache, etc.)"
          echo "• Total workflow execution time: ~5 minutes"
          echo "• Lines of reusable code: ~200+"
          echo "• Deployment environments supported: 2 (staging, production)"
          echo "• Notification platforms: 4 (Slack, Teams, Email, PagerDuty)"
          echo ""
          echo "✨ This demonstrates the power of GitHub Actions custom action ecosystem!"

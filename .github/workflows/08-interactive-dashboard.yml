name: 📊 Interactive Development Dashboard

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Update dashboard every hour during business hours (UTC)
    - cron: '0 9-17 * * 1-5'
  workflow_dispatch:
    inputs:
      dashboard_type:
        description: 'Dashboard type to generate'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - metrics-only
          - status-only
      include_performance:
        description: 'Include performance metrics'
        required: false
        default: true
        type: boolean

env:
  DASHBOARD_RETENTION_DAYS: 90
  NODE_VERSION: '20'

jobs:
  # Collect metrics from various sources
  collect-metrics:
    name: 📈 Collect Dashboard Metrics
    runs-on: ubuntu-latest
    
    outputs:
      metrics-available: ${{ steps.collect.outputs.metrics-available }}
      dashboard-data: ${{ steps.collect.outputs.dashboard-data }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📊 Collect Repository Metrics
        id: collect
        run: |
          # Create metrics collection script
          cat > collect-metrics.js << 'EOF'
          const { execSync } = require('child_process');
          const fs = require('fs');
          
          function getGitMetrics() {
            try {
              const commits = execSync('git rev-list --count HEAD').toString().trim();
              const contributors = execSync('git shortlog -sn | wc -l').toString().trim();
              const lastCommit = execSync('git log -1 --format="%ar"').toString().trim();
              const branches = execSync('git branch -r | wc -l').toString().trim();
              
              return {
                totalCommits: parseInt(commits),
                contributors: parseInt(contributors),
                lastCommit,
                branches: parseInt(branches)
              };
            } catch (error) {
              return {
                totalCommits: 0,
                contributors: 0,
                lastCommit: 'Unknown',
                branches: 0
              };
            }
          }
          
          function getCodeMetrics() {
            try {
              // Count lines of code
              const jsLines = execSync("find . -name '*.js' -not -path './node_modules/*' | xargs wc -l | tail -1 | awk '{print $1}'").toString().trim();
              const goLines = execSync("find . -name '*.go' | xargs wc -l | tail -1 | awk '{print $1}'").toString().trim();
              const ymlLines = execSync("find . -name '*.yml' -o -name '*.yaml' | xargs wc -l | tail -1 | awk '{print $1}'").toString().trim();
              
              const jsFiles = execSync("find . -name '*.js' -not -path './node_modules/*' | wc -l").toString().trim();
              const goFiles = execSync("find . -name '*.go' | wc -l").toString().trim();
              const ymlFiles = execSync("find . -name '*.yml' -o -name '*.yaml' | wc -l").toString().trim();
              
              return {
                languages: {
                  javascript: { files: parseInt(jsFiles), lines: parseInt(jsLines) },
                  go: { files: parseInt(goFiles), lines: parseInt(goLines) },
                  yaml: { files: parseInt(ymlFiles), lines: parseInt(ymlLines) }
                },
                totalFiles: parseInt(jsFiles) + parseInt(goFiles) + parseInt(ymlFiles),
                totalLines: parseInt(jsLines) + parseInt(goLines) + parseInt(ymlLines)
              };
            } catch (error) {
              return {
                languages: {},
                totalFiles: 0,
                totalLines: 0
              };
            }
          }
          
          function getWorkflowMetrics() {
            try {
              const workflows = execSync("find .github/workflows -name '*.yml' | wc -l").toString().trim();
              const actions = execSync("find .github/actions -name 'action.yml' | wc -l").toString().trim();
              
              return {
                workflows: parseInt(workflows),
                customActions: parseInt(actions)
              };
            } catch (error) {
              return {
                workflows: 0,
                customActions: 0
              };
            }
          }
          
          function getTestMetrics() {
            try {
              const testFiles = execSync("find . -name '*test*' -name '*.js' -o -name '*test*' -name '*.go' | wc -l").toString().trim();
              return {
                testFiles: parseInt(testFiles)
              };
            } catch (error) {
              return {
                testFiles: 0
              };
            }
          }
          
          // Collect all metrics
          const metrics = {
            timestamp: new Date().toISOString(),
            git: getGitMetrics(),
            code: getCodeMetrics(),
            workflows: getWorkflowMetrics(),
            tests: getTestMetrics(),
            repository: {
              name: process.env.GITHUB_REPOSITORY || 'Unknown',
              branch: process.env.GITHUB_REF_NAME || 'Unknown',
              commit: process.env.GITHUB_SHA || 'Unknown'
            }
          };
          
          // Save metrics
          fs.writeFileSync('dashboard-metrics.json', JSON.stringify(metrics, null, 2));
          console.log('Metrics collected successfully');
          console.log(JSON.stringify(metrics, null, 2));
          EOF
          
          # Run metrics collection
          node collect-metrics.js
          
          # Set outputs
          echo "metrics-available=true" >> $GITHUB_OUTPUT
          echo "dashboard-data=$(cat dashboard-metrics.json | jq -c .)" >> $GITHUB_OUTPUT
      
      - name: 📊 Upload Metrics Data
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-metrics
          path: dashboard-metrics.json
          retention-days: ${{ env.DASHBOARD_RETENTION_DAYS }}

  # Generate workflow status dashboard
  workflow-status:
    name: 🔄 Workflow Status Dashboard
    runs-on: ubuntu-latest
    needs: collect-metrics
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📊 Generate Workflow Status
        run: |
          cat > workflow-status.js << 'EOF'
          const workflows = [
            { name: 'Web App CI/CD', file: '01-web-app-cicd.yml', status: 'active' },
            { name: 'Multi-platform Release', file: '02-multi-platform-release.yml', status: 'active' },
            { name: 'Scheduled Maintenance', file: '03-scheduled-maintenance.yml', status: 'active' },
            { name: 'Security Deployment', file: '04-security-deployment.yml', status: 'active' },
            { name: 'Custom Actions Demo', file: '05-custom-actions-demo.yml', status: 'active' },
            { name: 'Event-driven Workflows', file: '06-event-driven-workflows.yml', status: 'active' },
            { name: 'Performance Optimization', file: '07-performance-optimization.yml', status: 'active' },
            { name: 'Interactive Dashboard', file: '08-interactive-dashboard.yml', status: 'running' }
          ];
          
          const statusHtml = `
          <div class="workflow-status">
            <h2>🔄 Workflow Status</h2>
            <div class="status-grid">
              ${workflows.map(wf => `
                <div class="workflow-card ${wf.status}">
                  <div class="workflow-name">${wf.name}</div>
                  <div class="workflow-file">${wf.file}</div>
                  <div class="workflow-status-badge">${wf.status.toUpperCase()}</div>
                </div>
              `).join('')}
            </div>
          </div>
          
          <style>
            .workflow-status { margin: 20px 0; }
            .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; }
            .workflow-card { padding: 15px; border-radius: 8px; border: 1px solid #ddd; }
            .workflow-card.active { border-left: 4px solid #28a745; }
            .workflow-card.running { border-left: 4px solid #ffc107; }
            .workflow-card.failed { border-left: 4px solid #dc3545; }
            .workflow-name { font-weight: bold; margin-bottom: 5px; }
            .workflow-file { font-size: 0.9em; color: #666; margin-bottom: 10px; }
            .workflow-status-badge { font-size: 0.8em; padding: 2px 6px; border-radius: 3px; background: #f8f9fa; }
          </style>
          `;
          
          require('fs').writeFileSync('workflow-status.html', statusHtml);
          EOF
          
          node workflow-status.js
      
      - name: 📊 Upload Workflow Status
        uses: actions/upload-artifact@v4
        with:
          name: workflow-status
          path: workflow-status.html
          retention-days: ${{ env.DASHBOARD_RETENTION_DAYS }}

  # Generate performance dashboard
  performance-dashboard:
    name: ⚡ Performance Dashboard
    runs-on: ubuntu-latest
    needs: collect-metrics
    if: github.event.inputs.include_performance != 'false'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📊 Generate Performance Charts
        run: |
          cat > performance-dashboard.js << 'EOF'
          const fs = require('fs');
          
          // Sample performance data (in real scenario, this would come from actual metrics)
          const performanceData = {
            lighthouse: {
              labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],
              performance: [85, 87, 89, 86, 90, 88, 92],
              accessibility: [95, 96, 94, 95, 97, 96, 98],
              bestPractices: [92, 93, 91, 94, 95, 93, 96],
              seo: [88, 89, 90, 88, 91, 89, 93]
            },
            buildTimes: {
              webApp: [12.5, 11.8, 13.2, 12.1, 11.9, 12.4, 11.7],
              cliTool: [8.2, 7.9, 8.4, 8.1, 7.8, 8.0, 7.6],
              microservice: [15.3, 14.8, 15.7, 15.1, 14.9, 15.2, 14.5]
            },
            testCoverage: {
              webApp: 85,
              cliTool: 78,
              microservice: 82
            }
          };
          
          const html = `
          <!DOCTYPE html>
          <html>
          <head>
              <title>Performance Dashboard</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header { text-align: center; margin-bottom: 30px; }
                  .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .metric-title { font-size: 18px; font-weight: 600; margin-bottom: 15px; color: #333; }
                  .chart-container { position: relative; height: 300px; }
                  .coverage-bars { display: flex; gap: 15px; margin-top: 15px; }
                  .coverage-bar { flex: 1; }
                  .coverage-label { font-size: 14px; margin-bottom: 5px; }
                  .coverage-progress { height: 8px; background: #e0e0e0; border-radius: 4px; overflow: hidden; }
                  .coverage-fill { height: 100%; background: linear-gradient(45deg, #4CAF50, #2196F3); transition: width 0.3s ease; }
                  .stats-row { display: flex; justify-content: space-between; margin-top: 15px; }
                  .stat-item { text-align: center; }
                  .stat-value { font-size: 24px; font-weight: 600; color: #2196F3; }
                  .stat-label { font-size: 12px; color: #666; margin-top: 5px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>⚡ Performance Dashboard</h1>
                      <p>Real-time insights into application performance and build metrics</p>
                      <p><small>Last updated: ${new Date().toLocaleString()}</small></p>
                  </div>
                  
                  <div class="metrics-grid">
                      <div class="metric-card">
                          <div class="metric-title">🔍 Lighthouse Scores</div>
                          <div class="chart-container">
                              <canvas id="lighthouseChart"></canvas>
                          </div>
                      </div>
                      
                      <div class="metric-card">
                          <div class="metric-title">⏱️ Build Times</div>
                          <div class="chart-container">
                              <canvas id="buildTimesChart"></canvas>
                          </div>
                      </div>
                      
                      <div class="metric-card">
                          <div class="metric-title">🧪 Test Coverage</div>
                          <div class="coverage-bars">
                              <div class="coverage-bar">
                                  <div class="coverage-label">Web App</div>
                                  <div class="coverage-progress">
                                      <div class="coverage-fill" style="width: ${performanceData.testCoverage.webApp}%"></div>
                                  </div>
                                  <small>${performanceData.testCoverage.webApp}%</small>
                              </div>
                              <div class="coverage-bar">
                                  <div class="coverage-label">CLI Tool</div>
                                  <div class="coverage-progress">
                                      <div class="coverage-fill" style="width: ${performanceData.testCoverage.cliTool}%"></div>
                                  </div>
                                  <small>${performanceData.testCoverage.cliTool}%</small>
                              </div>
                              <div class="coverage-bar">
                                  <div class="coverage-label">Microservice</div>
                                  <div class="coverage-progress">
                                      <div class="coverage-fill" style="width: ${performanceData.testCoverage.microservice}%"></div>
                                  </div>
                                  <small>${performanceData.testCoverage.microservice}%</small>
                              </div>
                          </div>
                          <div class="stats-row">
                              <div class="stat-item">
                                  <div class="stat-value">${Math.round((performanceData.testCoverage.webApp + performanceData.testCoverage.cliTool + performanceData.testCoverage.microservice) / 3)}%</div>
                                  <div class="stat-label">Average Coverage</div>
                              </div>
                              <div class="stat-item">
                                  <div class="stat-value">3</div>
                                  <div class="stat-label">Applications</div>
                              </div>
                          </div>
                      </div>
                      
                      <div class="metric-card">
                          <div class="metric-title">📊 Key Metrics</div>
                          <div class="stats-row">
                              <div class="stat-item">
                                  <div class="stat-value">${Math.max(...performanceData.lighthouse.performance)}</div>
                                  <div class="stat-label">Best Performance Score</div>
                              </div>
                              <div class="stat-item">
                                  <div class="stat-value">${Math.min(...performanceData.buildTimes.webApp).toFixed(1)}s</div>
                                  <div class="stat-label">Fastest Build</div>
                              </div>
                          </div>
                          <div class="stats-row">
                              <div class="stat-item">
                                  <div class="stat-value">${performanceData.lighthouse.labels.length}</div>
                                  <div class="stat-label">Days Tracked</div>
                              </div>
                              <div class="stat-item">
                                  <div class="stat-value">🚀</div>
                                  <div class="stat-label">Status</div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
              
              <script>
                  const performanceData = ${JSON.stringify(performanceData)};
                  
                  // Lighthouse scores chart
                  const lighthouseCtx = document.getElementById('lighthouseChart').getContext('2d');
                  new Chart(lighthouseCtx, {
                      type: 'line',
                      data: {
                          labels: performanceData.lighthouse.labels,
                          datasets: [
                              {
                                  label: 'Performance',
                                  data: performanceData.lighthouse.performance,
                                  borderColor: '#4CAF50',
                                  backgroundColor: 'rgba(76, 175, 80, 0.1)',
                                  tension: 0.3
                              },
                              {
                                  label: 'Accessibility',
                                  data: performanceData.lighthouse.accessibility,
                                  borderColor: '#2196F3',
                                  backgroundColor: 'rgba(33, 150, 243, 0.1)',
                                  tension: 0.3
                              },
                              {
                                  label: 'Best Practices',
                                  data: performanceData.lighthouse.bestPractices,
                                  borderColor: '#FF9800',
                                  backgroundColor: 'rgba(255, 152, 0, 0.1)',
                                  tension: 0.3
                              }
                          ]
                      },
                      options: {
                          responsive: true,
                          maintainAspectRatio: false,
                          scales: {
                              y: {
                                  beginAtZero: false,
                                  min: 70,
                                  max: 100
                              }
                          },
                          plugins: {
                              legend: {
                                  position: 'bottom'
                              }
                          }
                      }
                  });
                  
                  // Build times chart
                  const buildTimesCtx = document.getElementById('buildTimesChart').getContext('2d');
                  new Chart(buildTimesCtx, {
                      type: 'bar',
                      data: {
                          labels: performanceData.lighthouse.labels,
                          datasets: [
                              {
                                  label: 'Web App',
                                  data: performanceData.buildTimes.webApp,
                                  backgroundColor: 'rgba(76, 175, 80, 0.8)'
                              },
                              {
                                  label: 'CLI Tool',
                                  data: performanceData.buildTimes.cliTool,
                                  backgroundColor: 'rgba(33, 150, 243, 0.8)'
                              },
                              {
                                  label: 'Microservice',
                                  data: performanceData.buildTimes.microservice,
                                  backgroundColor: 'rgba(255, 152, 0, 0.8)'
                              }
                          ]
                      },
                      options: {
                          responsive: true,
                          maintainAspectRatio: false,
                          scales: {
                              y: {
                                  beginAtZero: true,
                                  title: {
                                      display: true,
                                      text: 'Build Time (seconds)'
                                  }
                              }
                          },
                          plugins: {
                              legend: {
                                  position: 'bottom'
                              }
                          }
                      }
                  });
              </script>
          </body>
          </html>
          `;
          
          fs.writeFileSync('performance-dashboard.html', html);
          console.log('Performance dashboard generated successfully');
          EOF
          
          node performance-dashboard.js
      
      - name: 📊 Upload Performance Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: performance-dashboard
          path: performance-dashboard.html
          retention-days: ${{ env.DASHBOARD_RETENTION_DAYS }}

  # Generate repository overview dashboard
  repository-overview:
    name: 📋 Repository Overview
    runs-on: ubuntu-latest
    needs: collect-metrics
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📥 Download Metrics
        uses: actions/download-artifact@v4
        with:
          name: dashboard-metrics
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📊 Generate Repository Overview
        run: |
          cat > repo-overview.js << 'EOF'
          const fs = require('fs');
          const metrics = JSON.parse(fs.readFileSync('dashboard-metrics.json', 'utf8'));
          
          const html = `
          <!DOCTYPE html>
          <html>
          <head>
              <title>Repository Overview - ${metrics.repository.name}</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 1000px; margin: 0 auto; }
                  .header { text-align: center; margin-bottom: 30px; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .overview-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .overview-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .card-title { font-size: 16px; font-weight: 600; color: #333; margin-bottom: 15px; border-bottom: 2px solid #f0f0f0; padding-bottom: 10px; }
                  .metric-row { display: flex; justify-content: space-between; margin: 10px 0; }
                  .metric-label { color: #666; }
                  .metric-value { font-weight: 600; color: #2196F3; }
                  .language-bar { margin: 10px 0; }
                  .language-label { font-size: 14px; margin-bottom: 5px; }
                  .language-progress { height: 6px; background: #e0e0e0; border-radius: 3px; overflow: hidden; }
                  .language-fill { height: 100%; transition: width 0.3s ease; }
                  .badge { display: inline-block; padding: 3px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; }
                  .badge-success { background: #d4edda; color: #155724; }
                  .badge-info { background: #d1ecf1; color: #0c5460; }
                  .badge-warning { background: #fff3cd; color: #856404; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📋 ${metrics.repository.name}</h1>
                      <p>Comprehensive repository overview and metrics</p>
                      <div>
                          <span class="badge badge-info">Branch: ${metrics.repository.branch}</span>
                          <span class="badge badge-success">Last updated: ${new Date(metrics.timestamp).toLocaleString()}</span>
                      </div>
                  </div>
                  
                  <div class="overview-grid">
                      <div class="overview-card">
                          <div class="card-title">📊 Repository Stats</div>
                          <div class="metric-row">
                              <span class="metric-label">Total Commits</span>
                              <span class="metric-value">${metrics.git.totalCommits}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">Contributors</span>
                              <span class="metric-value">${metrics.git.contributors}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">Branches</span>
                              <span class="metric-value">${metrics.git.branches}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">Last Commit</span>
                              <span class="metric-value">${metrics.git.lastCommit}</span>
                          </div>
                      </div>
                      
                      <div class="overview-card">
                          <div class="card-title">💻 Code Metrics</div>
                          <div class="metric-row">
                              <span class="metric-label">Total Files</span>
                              <span class="metric-value">${metrics.code.totalFiles}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">Lines of Code</span>
                              <span class="metric-value">${metrics.code.totalLines.toLocaleString()}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">Test Files</span>
                              <span class="metric-value">${metrics.tests.testFiles}</span>
                          </div>
                      </div>
                      
                      <div class="overview-card">
                          <div class="card-title">⚡ Automation</div>
                          <div class="metric-row">
                              <span class="metric-label">Workflows</span>
                              <span class="metric-value">${metrics.workflows.workflows}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">Custom Actions</span>
                              <span class="metric-value">${metrics.workflows.customActions}</span>
                          </div>
                          <div class="metric-row">
                              <span class="metric-label">CI/CD Status</span>
                              <span class="badge badge-success">Active</span>
                          </div>
                      </div>
                      
                      <div class="overview-card">
                          <div class="card-title">🔧 Languages</div>
                          ${Object.entries(metrics.code.languages).map(([lang, data]) => {
                            const percentage = Math.round((data.lines / metrics.code.totalLines) * 100);
                            const colors = {
                              javascript: '#f1e05a',
                              go: '#00ADD8',
                              yaml: '#cb171e'
                            };
                            return `
                            <div class="language-bar">
                                <div class="language-label">${lang.charAt(0).toUpperCase() + lang.slice(1)} (${data.files} files)</div>
                                <div class="language-progress">
                                    <div class="language-fill" style="width: ${percentage}%; background: ${colors[lang] || '#666'};"></div>
                                </div>
                                <small>${percentage}% (${data.lines} lines)</small>
                            </div>
                            `;
                          }).join('')}
                      </div>
                  </div>
                  
                  <div class="overview-card">
                      <div class="card-title">📈 Recent Activity</div>
                      <p>This dashboard is automatically updated with every push to main and on a scheduled basis.</p>
                      <p><strong>Commit:</strong> <code>${metrics.repository.commit.substring(0, 8)}</code></p>
                      <p><strong>Generated:</strong> ${new Date(metrics.timestamp).toLocaleString()}</p>
                  </div>
              </div>
          </body>
          </html>
          `;
          
          fs.writeFileSync('repository-overview.html', html);
          console.log('Repository overview generated successfully');
          EOF
          
          node repo-overview.js
      
      - name: 📊 Upload Repository Overview
        uses: actions/upload-artifact@v4
        with:
          name: repository-overview
          path: repository-overview.html
          retention-days: ${{ env.DASHBOARD_RETENTION_DAYS }}

  # Combine all dashboards into a unified view
  unified-dashboard:
    name: 🎛️ Unified Dashboard
    runs-on: ubuntu-latest
    needs: [collect-metrics, workflow-status, performance-dashboard, repository-overview]
    if: always() && needs.collect-metrics.outputs.metrics-available == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📥 Download All Dashboard Components
        uses: actions/download-artifact@v4
        with:
          pattern: '*dashboard*'
          merge-multiple: true
      
      - name: 📥 Download Additional Components
        uses: actions/download-artifact@v4
        with:
          pattern: 'workflow-status'
          merge-multiple: true
      
      - name: 📥 Download Repository Overview
        uses: actions/download-artifact@v4
        with:
          pattern: 'repository-overview'
          merge-multiple: true
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🎛️ Create Unified Dashboard
        run: |
          cat > unified-dashboard.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>GitHub Actions Demo - Dashboard</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 0; background: #f5f5f5; }
                  .nav { background: #24292e; color: white; padding: 15px 20px; position: sticky; top: 0; z-index: 1000; }
                  .nav h1 { margin: 0; display: inline-block; }
                  .nav-links { float: right; margin-top: 5px; }
                  .nav-link { color: #58a6ff; text-decoration: none; margin: 0 15px; font-size: 14px; }
                  .nav-link:hover { text-decoration: underline; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                  .dashboard-grid { display: grid; grid-template-columns: 1fr; gap: 30px; }
                  .dashboard-section { background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; }
                  .section-header { background: #f8f9fa; padding: 20px; border-bottom: 1px solid #e1e4e8; }
                  .section-title { margin: 0; color: #24292e; }
                  .section-content { padding: 20px; }
                  iframe { width: 100%; border: none; min-height: 600px; }
                  .quick-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; }
                  .stat-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }
                  .stat-value { font-size: 2em; font-weight: bold; color: #2196F3; }
                  .stat-label { color: #666; margin-top: 5px; }
                  .loading { text-align: center; padding: 40px; color: #666; }
              </style>
          </head>
          <body>
              <nav class="nav">
                  <h1>🚀 GitHub Actions Demo Dashboard</h1>
                  <div class="nav-links">
                      <a href="#overview" class="nav-link">Overview</a>
                      <a href="#performance" class="nav-link">Performance</a>
                      <a href="#workflows" class="nav-link">Workflows</a>
                      <a href="https://github.com/${{ github.repository }}" class="nav-link" target="_blank">Repository</a>
                  </div>
              </nav>
              
              <div class="container">
                  <div class="quick-stats">
                      <div class="stat-card">
                          <div class="stat-value">8</div>
                          <div class="stat-label">Active Workflows</div>
                      </div>
                      <div class="stat-card">
                          <div class="stat-value">3</div>
                          <div class="stat-label">Sample Applications</div>
                      </div>
                      <div class="stat-card">
                          <div class="stat-value">1</div>
                          <div class="stat-label">Custom Actions</div>
                      </div>
                      <div class="stat-card">
                          <div class="stat-value">100%</div>
                          <div class="stat-label">Demo Coverage</div>
                      </div>
                  </div>
                  
                  <div class="dashboard-grid">
                      <div class="dashboard-section" id="overview">
                          <div class="section-header">
                              <h2 class="section-title">📋 Repository Overview</h2>
                          </div>
                          <div class="section-content">
                              <iframe src="data:text/html;base64,REPO_OVERVIEW_BASE64" title="Repository Overview"></iframe>
                          </div>
                      </div>
                      
                      <div class="dashboard-section" id="performance">
                          <div class="section-header">
                              <h2 class="section-title">⚡ Performance Metrics</h2>
                          </div>
                          <div class="section-content">
                              <iframe src="data:text/html;base64,PERFORMANCE_BASE64" title="Performance Dashboard"></iframe>
                          </div>
                      </div>
                      
                      <div class="dashboard-section" id="workflows">
                          <div class="section-header">
                              <h2 class="section-title">🔄 Workflow Status</h2>
                          </div>
                          <div class="section-content">
                              <iframe src="data:text/html;base64,WORKFLOW_STATUS_BASE64" title="Workflow Status"></iframe>
                          </div>
                      </div>
                  </div>
                  
                  <footer style="text-align: center; padding: 40px 0; color: #666;">
                      <p>Generated automatically by GitHub Actions • Last updated: $(date)</p>
                      <p>🚀 <a href="https://github.com/${{ github.repository }}">View on GitHub</a></p>
                  </footer>
              </div>
              
              <script>
                  // Auto-refresh every 5 minutes
                  setTimeout(() => {
                      location.reload();
                  }, 5 * 60 * 1000);
                  
                  // Smooth scrolling for navigation links
                  document.querySelectorAll('.nav-link[href^="#"]').forEach(link => {
                      link.addEventListener('click', (e) => {
                          e.preventDefault();
                          const target = document.querySelector(link.getAttribute('href'));
                          if (target) {
                              target.scrollIntoView({ behavior: 'smooth' });
                          }
                      });
                  });
              </script>
          </body>
          </html>
          EOF
          
          # Replace placeholders with actual content (base64 encoded)
          if [ -f "repository-overview.html" ]; then
            REPO_OVERVIEW_BASE64=$(base64 -w 0 repository-overview.html)
            sed -i "s/REPO_OVERVIEW_BASE64/$REPO_OVERVIEW_BASE64/g" unified-dashboard.html
          fi
          
          if [ -f "performance-dashboard.html" ]; then
            PERFORMANCE_BASE64=$(base64 -w 0 performance-dashboard.html)
            sed -i "s/PERFORMANCE_BASE64/$PERFORMANCE_BASE64/g" unified-dashboard.html
          fi
          
          if [ -f "workflow-status.html" ]; then
            WORKFLOW_STATUS_BASE64=$(base64 -w 0 workflow-status.html)
            sed -i "s/WORKFLOW_STATUS_BASE64/$WORKFLOW_STATUS_BASE64/g" unified-dashboard.html
          fi
      
      - name: 📊 Upload Unified Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: unified-dashboard
          path: unified-dashboard.html
          retention-days: ${{ env.DASHBOARD_RETENTION_DAYS }}
      
      - name: 📢 Dashboard Summary
        run: |
          echo "## 🎛️ Dashboard Generated Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The interactive dashboard has been generated with the following components:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Repository Overview**: Code metrics, contributors, and activity" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Performance Dashboard**: Lighthouse scores, build times, and test coverage" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Workflow Status**: All workflow statuses and automation health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Quick Stats" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflows**: 8 active automation workflows" >> $GITHUB_STEP_SUMMARY
          echo "- **Applications**: 3 sample applications with full CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom Actions**: 1 composite action for intelligent deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access" >> $GITHUB_STEP_SUMMARY
          echo "Download the dashboard artifacts to view the interactive reports locally." >> $GITHUB_STEP_SUMMARY

  # Deploy dashboard to GitHub Pages (optional)
  deploy-to-pages:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: unified-dashboard
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📥 Download Unified Dashboard
        uses: actions/download-artifact@v4
        with:
          name: unified-dashboard
      
      - name: 🏗️ Setup Pages
        uses: actions/configure-pages@v4
      
      - name: 📤 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

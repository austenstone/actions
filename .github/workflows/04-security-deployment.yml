name: 04 - Security-First Deployment Pipeline

on:
  push:
    branches: [main]
    paths: ['src/microservice/**']
  pull_request:
    branches: [main]
    paths: ['src/microservice/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: environment
        default: 'staging'
      security_scan:
        description: 'Run security scan'
        required: false
        type: boolean
        default: true
      force_deploy:
        description: 'Force deployment (bypass some checks)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/microservice

permissions:
  contents: read
  security-events: write
  id-token: write
  packages: write

jobs:
  # Security scanning and vulnerability assessment
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.security_scan != 'false'
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
      vulnerabilities: ${{ steps.scan.outputs.vulnerabilities }}
      severity-level: ${{ steps.scan.outputs.severity }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript
          queries: security-extended,security-and-quality
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src/microservice'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./src/microservice
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        
      - name: Container security scan
        if: always()
        run: |
          echo "🔍 Running container security scan..."
          
          # Scan Dockerfile for best practices
          if [ -f "src/microservice/Dockerfile" ]; then
            echo "📋 Analyzing Dockerfile..."
            
            # Check for non-root user
            if ! grep -q "USER " src/microservice/Dockerfile; then
              echo "⚠️ WARNING: Dockerfile doesn't specify a non-root user"
            fi
            
            # Check for latest tag usage
            if grep -q "FROM.*:latest" src/microservice/Dockerfile; then
              echo "⚠️ WARNING: Using 'latest' tag in base image"
            fi
            
            # Check for package cache cleanup
            if grep -q "apt-get install" src/microservice/Dockerfile && ! grep -q "rm -rf /var/lib/apt/lists" src/microservice/Dockerfile; then
              echo "⚠️ WARNING: Package cache not cleaned up"
            fi
          fi
          
      - name: Evaluate security scan results
        id: scan
        run: |
          VULNERABILITIES=0
          SEVERITY="low"
          
          # Check for CodeQL results
          if [ -f "$GITHUB_WORKSPACE/results/go.sarif" ] || [ -f "$GITHUB_WORKSPACE/results/javascript.sarif" ]; then
            echo "📊 CodeQL scan completed"
          fi
          
          # Check for Trivy results
          if [ -f "trivy-results.sarif" ]; then
            TRIVY_ISSUES=$(jq '.runs[0].results | length' trivy-results.sarif)
            if [ "$TRIVY_ISSUES" -gt 0 ]; then
              VULNERABILITIES=$((VULNERABILITIES + TRIVY_ISSUES))
              SEVERITY="high"
            fi
          fi
          
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          echo "results=Security scan completed with $VULNERABILITIES vulnerabilities" >> $GITHUB_OUTPUT

  # Compliance and policy validation
  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    outputs:
      compliance-status: ${{ steps.compliance.outputs.status }}
      policy-violations: ${{ steps.compliance.outputs.violations }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate Kubernetes manifests
        if: hashFiles('src/microservice/k8s/**') != ''
        run: |
          echo "🔍 Validating Kubernetes manifests..."
          
          # Install kubeval for validation
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin
          
          # Validate all YAML files
          for file in src/microservice/k8s/*.yaml src/microservice/k8s/*.yml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              kubeval "$file" --strict
            fi
          done
          
      - name: Policy validation with OPA
        run: |
          echo "🔍 Running policy validation..."
          
          # Install OPA
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
          
          # Create basic security policy
          cat > security-policy.rego << 'EOF'
          package kubernetes.security
          
          # Deny containers running as root
          deny[msg] {
            input.kind == "Deployment"
            input.spec.template.spec.securityContext.runAsNonRoot != true
            msg := "Container must not run as root"
          }
          
          # Require resource limits
          deny[msg] {
            input.kind == "Deployment"
            container := input.spec.template.spec.containers[_]
            not container.resources.limits
            msg := "Container must have resource limits"
          }
          
          # Require readiness probe
          deny[msg] {
            input.kind == "Deployment"
            container := input.spec.template.spec.containers[_]
            not container.readinessProbe
            msg := "Container must have readiness probe"
          }
          EOF
          
          # Validate policies against manifests
          VIOLATIONS=0
          if [ -d "src/microservice/k8s" ]; then
            for file in src/microservice/k8s/*.yaml src/microservice/k8s/*.yml; do
              if [ -f "$file" ]; then
                echo "Checking policies for $file..."
                RESULT=$(opa eval -d security-policy.rego -I "$file" "data.kubernetes.security.deny")
                if [ "$RESULT" != "[]" ]; then
                  echo "Policy violations found in $file:"
                  echo "$RESULT"
                  VIOLATIONS=$((VIOLATIONS + 1))
                fi
              fi
            done
          fi
          
          echo "violations=$VIOLATIONS" >> $GITHUB_OUTPUT
          
      - name: Compliance summary
        id: compliance
        run: |
          # For now, set compliance as passed for demo
          echo "status=compliant" >> $GITHUB_OUTPUT
          echo "✅ All compliance checks passed"
          echo "violations=0" >> $GITHUB_OUTPUT

  # Secure build with OIDC authentication
  build-secure:
    name: Secure Build
    needs: [security-scan, compliance-check]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.compliance-check.outputs.compliance-status == 'compliant' || github.event.inputs.force_deploy == 'true')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      sbom: ${{ steps.sbom.outputs.sbom }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials with OIDC
        if: false  # Disabled for demo - requires actual AWS role setup
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole
          aws-region: us-east-1
          
      - name: Configure Azure credentials with OIDC
        if: false  # Disabled for demo - requires actual Azure setup  
        run: echo "Azure login would be configured here"
          
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate build metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Secure Microservice
            org.opencontainers.image.description=Security-first microservice deployment
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: src/microservice
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          
      - name: Generate SBOM
        id: sbom
        run: |
          echo "🔍 Generating Software Bill of Materials..."
          
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM for the built image
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          syft "$IMAGE_WITH_DIGEST" -o spdx-json=sbom.spdx.json
          
          echo "sbom=sbom.spdx.json" >> $GITHUB_OUTPUT
          
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json
          retention-days: 90
          
      - name: Sign container image
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🔐 Signing container image..."
          
          # Install cosign for container signing
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign
          
          # Sign the container image
          IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          cosign sign --yes "$IMAGE_WITH_DIGEST"

  # Deploy with environment-specific approvals
  deploy-with-approval:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    needs: [security-scan, compliance-check, build-secure]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://${{ github.event.inputs.environment || 'staging' }}.example.com
    if: |
      always() && 
      needs.build-secure.result == 'success' &&
      (needs.security-scan.outputs.severity-level != 'high' || github.event.inputs.force_deploy == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure deployment credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          
      - name: Deploy to Kubernetes
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment || 'staging' }}..."
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Update image in deployment manifests
          if [ -f "src/microservice/k8s/deployment.yaml" ]; then
            sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-secure.outputs.image-digest }}|" src/microservice/k8s/deployment.yaml
            
            # Apply manifests
            echo "Applying Kubernetes manifests..."
            kubectl apply -f src/microservice/k8s/ --dry-run=client -o yaml
            
            # In a real scenario, you would apply to the actual cluster
            echo "✅ Deployment configuration validated"
          else
            echo "📦 Simulating deployment..."
            sleep 10
            echo "✅ Deployment completed successfully"
          fi
          
      - name: Run post-deployment security tests
        run: |
          echo "🔍 Running post-deployment security tests..."
          
          # Simulate security tests
          sleep 5
          
          echo "✅ Security tests passed"
          
      - name: Verify deployment health
        run: |
          echo "🏥 Verifying deployment health..."
          
          # Simulate health checks
          sleep 3
          
          echo "✅ Health checks passed"
          
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'staging' }}';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: `Deployed to ${environment}`,
              context: `deploy/${environment}`
            });
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment: environment,
              description: 'Deployment completed successfully'
            });
            
      - name: Generate deployment summary
        run: |
          echo "## 🔐 Security-First Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilities Found**: ${{ needs.security-scan.outputs.vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Level**: ${{ needs.security-scan.outputs.severity-level }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance Status**: ${{ needs.compliance-check.outputs.compliance-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-secure.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Signed**: ${{ github.ref == 'refs/heads/main' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment URL](https://${{ github.event.inputs.environment || 'staging' }}.example.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Report](https://github.com/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
